services:
  redis:
    image: redis:7-alpine
    container_name: redis
    env_file:
      - .env
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "save 900 1" >> /usr/local/etc/redis/redis.conf &&
        echo "dir /data" >> /usr/local/etc/redis/redis.conf &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD-SHELL", 'redis-cli -a "$${REDIS_PASSWORD}" ping | grep PONG']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  nats:
    image: nats:latest
    container_name: nats
    ports:
      - "4222:4222"
      - "8222:8222"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "nats-ping -s nats://localhost:4222"]
      interval: 10s
      timeout: 2s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    restart: unless-stopped
    depends_on:
      - prometheus

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data
    restart: unless-stopped

  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: server
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
      - minio
    ports:
      - "8080:8080"
    environment:
      - CONFIG_PATH=/app/internal/config
    volumes:
      - ./internal/config:/app/internal/config:ro
      - ./migrations:/app/migrations:ro
    restart: on-failure
    entrypoint: [
        "/bin/sh",
        "-c",
        "until nc -z postgres 5432;\
        do echo waiting for postgres; sleep 2;\
        done;goose -dir ./migrations postgres \
        \"postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB?sslmode=disable\" up;\
        ./main",
      ]

volumes:
  redisdata:
  pgdata:
  miniodata:
